/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Main variables\r\nconst listContainer = document.querySelector(\"[data-lists]\");\r\nconst newListForm = document.querySelector(\"[data-new-list-form]\");\r\nconst newListInput = document.querySelector(\"[data-new-list-input]\");\r\nconst deleteListButton = document.querySelector(\"[data-delete-list-button\");\r\nconst listDisplayContainer = document.querySelector(\r\n  \"[data-list-display-container]\"\r\n);\r\nconst listTitleElement = document.querySelector(\"[data-list-title]\");\r\nconst listCountElement = document.querySelector(\"[data-list-count]\");\r\nconst tasksContainer = document.querySelector(\"[data-tasks]\");\r\nconst taskTemplate = document.getElementById(\"task-template\");\r\nconst newTaskForm = document.querySelector(\"[data-new-task-form]\");\r\nconst newTaskInput = document.querySelector(\"[data-new-task-input]\");\r\nconst clearCompleteTaskButton = document.querySelector(\r\n  \"[data-delete-complete-task-button]\"\r\n);\r\n\r\n// Local storage key\r\nconst LOCAL_STORAGE_PROJECT_KEY = \"project.lists\";\r\nconst LOCAL_STORAGE_SELECTED_PROJECT_ID_KEY = \"project.selectedListId\";\r\n\r\n// Will get the info from local storage and parse ir into an object (Lists Object)\r\n// or, if it does not exist, will get an empty array)\r\nlet lists = JSON.parse(localStorage.getItem(LOCAL_STORAGE_PROJECT_KEY)) || [];\r\n\r\n// Will get the selected list id\r\nlet selectedListId = localStorage.getItem(\r\n  LOCAL_STORAGE_SELECTED_PROJECT_ID_KEY\r\n);\r\n\r\n// Event listener to remove the selected project\r\nlistContainer.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName.toLowerCase() === \"li\") {\r\n    selectedListId = e.target.dataset.listId;\r\n    saveAndRender();\r\n  }\r\n});\r\n\r\n// Event listener to check the tasks and render the remaining number\r\ntasksContainer.addEventListener(\"click\", (e) => {\r\n  if (e.target.tagName.toLowerCase() === \"input\") {\r\n    const selectedList = lists.find((list) => list.id === selectedListId);\r\n    const selectedTask = selectedList.tasks.find(\r\n      (task) => task.id === e.target.id\r\n    );\r\n    selectedTask.complete = e.target.checked;\r\n    save();\r\n    renderTaskCount(selectedList);\r\n  }\r\n});\r\n\r\n// Evente listener to clear complete tasks\r\nclearCompleteTaskButton.addEventListener(\"click\", (e) => {\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n  selectedList.tasks = selectedList.tasks.filter((task) => !task.complete);\r\n  saveAndRender();\r\n});\r\n\r\n// Event listener to delete the projects\r\ndeleteListButton.addEventListener(\"click\", (e) => {\r\n  lists = lists.filter((list) => list.id !== selectedListId); // Return all the lists exept the selected one\r\n  selectedListId = null;\r\n  saveAndRender();\r\n});\r\n\r\n// Event listner to create an add a new project to the projects list\r\nnewListForm.addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const listName = newListInput.value; // Get the list name from the input\r\n  if (listName === null || listName === \"\") return;\r\n  const list = createProject(listName); // Using input as an argument to create a new project\r\n  newListInput.value = null; // Will clear the input field\r\n  lists.push(list);\r\n  saveAndRender(); // On submit will save to local storage and render\r\n});\r\n\r\nnewTaskForm.addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const taskName = newTaskInput.value;\r\n  if (taskName === null || taskName === \"\") return;\r\n  const task = createTask(taskName);\r\n  newTaskInput.value = null;\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n  selectedList.tasks.push(task);\r\n  saveAndRender();\r\n});\r\n\r\n// Create the project\r\nfunction createProject(name) {\r\n  return { id: Date.now().toString(), name: name, tasks: [] };\r\n  // The tasks array is empty by default\r\n  // The Date object is being used to provide an unique id\r\n  // by taking the exact date of the creation and converting it to a string\r\n}\r\n\r\n// Create Tasks\r\nfunction createTask(name) {\r\n  return { id: Date.now().toString(), name: name, complete: false };\r\n}\r\n\r\n// Save to local storage and render\r\nfunction saveAndRender() {\r\n  save();\r\n  render();\r\n}\r\n\r\n// Save to local storage\r\nfunction save() {\r\n  localStorage.setItem(LOCAL_STORAGE_PROJECT_KEY, JSON.stringify(lists));\r\n  localStorage.setItem(LOCAL_STORAGE_SELECTED_PROJECT_ID_KEY, selectedListId);\r\n}\r\n\r\n// Function to render the projects list\r\nfunction render() {\r\n  clearElement(listContainer);\r\n  renderLists();\r\n\r\n  const selectedList = lists.find((list) => list.id === selectedListId);\r\n\r\n  if (selectedListId === null) {\r\n    listDisplayContainer.style.display = \"none\";\r\n  } else {\r\n    listDisplayContainer.style.display = \"\"; // Will revert the display to what it was\r\n    listTitleElement.innerText = selectedList.name;\r\n    renderTaskCount(selectedList);\r\n    clearElement(tasksContainer);\r\n    renderTasks(selectedList);\r\n  }\r\n}\r\n\r\n// Will render the tasks\r\nfunction renderTasks(selectedList) {\r\n  //Method to use the HTML inside the template tag, the \"content, true\"\r\n  // is essential to render all te content isinde the tag.\r\n  selectedList.tasks.forEach((task) => {\r\n    const taskElement = document.importNode(taskTemplate.content, true);\r\n    const checkbox = taskElement.querySelector(\"input\");\r\n    checkbox.id = task.id;\r\n    checkbox.checked = task.complete;\r\n    const label = taskElement.querySelector(\"label\");\r\n    label.htmlFor = task.id;\r\n    label.append(task.name);\r\n    tasksContainer.appendChild(taskElement);\r\n  });\r\n}\r\n\r\nfunction renderTaskCount(selectedList) {\r\n  const incompleteTasksCount = selectedList.tasks.filter(\r\n    (task) => !task.complete\r\n  ).length; // Will doisplay the number of tasks based on the length of the tasks array\r\n  const taskString = incompleteTasksCount === 1 ? \"task\" : \"tasks\";\r\n  listCountElement.innerText = `${incompleteTasksCount} ${taskString} remaining`;\r\n}\r\n\r\nfunction renderLists() {\r\n  lists.forEach((list) => {\r\n    const listElement = document.createElement(\"li\");\r\n    listElement.dataset.listId = list.id;\r\n    listElement.classList.add(\"list-name\");\r\n    listElement.innerText = list.name;\r\n    if (list.id === selectedListId) {\r\n      listElement.classList.add(\"active-list\");\r\n    }\r\n    listContainer.appendChild(listElement);\r\n  });\r\n}\r\n\r\n// Function to clear the projects list\r\nfunction clearElement(element) {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n    // While the element has a first child, remove it.\r\n  }\r\n}\r\n\r\nrender();\r\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;